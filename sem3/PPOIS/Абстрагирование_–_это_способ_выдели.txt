Абстрагирование – это способ выделить набор значимых характеристик объекта, исключая из рассмотрения незначимые. Соответственно, абстракция – это набор всех таких характеристик.
Абстракция это использование только тех характеристик объекта, которые с достаточной точностью представляют его в данной системе. Основная идея состоит в том, чтобы представить объект минимальным набором полей и методов и при этом с достаточной точностью для решаемой задачи.

Инкапсуляция это скрытие данных и методов.
Инкапсуляция позволяет пользователю не задумываться о сложности класса (что у него внутри?), а взаимодействовать с классом посредством предоставляемых открытых методов и данных.
То есть пользователю предоставляется только спецификация объекта.
Спецификация объекта это открытые методы и открытые данные класса.

Наследование позволяет описать новый класс на основе существующего класса (родительского класса).
Новый класс заимствует методы, поля, свойства родительского класса.

Полиморфизм это свойство системы использовать объекты с одинаковым интерфейсом без информации о типе объекта и организации объекта.
Другими словами:
Возможность объектов с одинаковой спецификацией иметь различную реализацию. Язык программирования поддерживает полиморфизм, если классы с одинаковой спецификацией могут иметь различную реализацию — например, реализация класса может быть изменена в процессе наследования.
Кратко смысл полиморфизма можно выразить фразой: «Один интерфейс, множество реализаций».
Динамический полиморфизм - возможность обращаться к реализации потомка через интерфейс предка.
Статический полиморфизм - возможность определить несколько функций с одинаковыми именами, но различными параметрами и реализацией.

Ассоциация - один класс включает другой класс в качестве поля.
Агрегация - снаружи определяем. (new в main)
Композиция - определяем внутри.






Принцип единственной обязанности / ответственности (single responsibility principle / SRP) обозначает, что каждый объект должен иметь одну обязанность и эта обязанность должна быть полностью инкапсулирована в класс. Все его сервисы должны быть направлены исключительно на обеспечение этой обязанности.

Принцип открытости / закрытости (open-closed principle / OCP) декларирует, что программные сущности (классы, модули, функции и т. п.) должны быть открыты для расширения, но закрыты для изменения. Это означает, что эти сущности могут менять свое поведение без изменения их исходного кода.

Принцип подстановки Барбары Лисков (Liskov substitution principle / LSP) в формулировке Роберта Мартина: «функции, которые используют базовый тип, должны иметь возможность использовать подтипы базового типа не зная об этом».

Принцип разделения интерфейса (interface segregation principle / ISP) в формулировке Роберта Мартина: «клиенты не должны зависеть от методов, которые они не используют». Принцип разделения интерфейсов говорит о том, что слишком «толстые» интерфейсы необходимо разделять на более маленькие и специфические, чтобы клиенты маленьких интерфейсов знали только о методах, которые необходимы им в работе. В итоге, при изменении метода интерфейса не должны меняться клиенты, которые этот метод не используют.

Принцип инверсии зависимостей (dependency inversion principle / DIP) — модули верхних уровней не должны зависеть от модулей нижних уровней, а оба типа модулей должны зависеть от абстракций; сами абстракции не должны зависеть от деталей, а вот детали должны зависеть от абстракций.


Принципы для разработки:

